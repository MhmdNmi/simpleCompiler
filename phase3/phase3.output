

Terminals which are not used:

   LEFTBRACE
   RIGHTBRACE


Conflict in state 109 between rule 59 and token OR resolved as reduce.
Conflict in state 109 between rule 59 and token ORBIT resolved as shift.
Conflict in state 109 between rule 59 and token AND resolved as reduce.
Conflict in state 109 between rule 59 and token ANDBIT resolved as shift.
Conflict in state 109 between rule 59 and token XORBIT resolved as shift.
Conflict in state 109 between rule 59 and token PLUS resolved as reduce.
Conflict in state 109 between rule 59 and token MINUS resolved as reduce.
Conflict in state 109 between rule 59 and token MULTIPLY resolved as reduce.
Conflict in state 109 between rule 59 and token DIVIDE resolved as reduce.
Conflict in state 110 between rule 53 and token OR resolved as reduce.
Conflict in state 110 between rule 53 and token ORBIT resolved as reduce.
Conflict in state 110 between rule 53 and token AND resolved as reduce.
Conflict in state 110 between rule 53 and token ANDBIT resolved as reduce.
Conflict in state 110 between rule 53 and token XORBIT resolved as reduce.
Conflict in state 110 between rule 53 and token PLUS resolved as reduce.
Conflict in state 110 between rule 53 and token MINUS resolved as reduce.
Conflict in state 110 between rule 53 and token MULTIPLY resolved as reduce.
Conflict in state 110 between rule 53 and token DIVIDE resolved as reduce.
Conflict in state 111 between rule 57 and token OR resolved as reduce.
Conflict in state 111 between rule 57 and token ORBIT resolved as shift.
Conflict in state 111 between rule 57 and token AND resolved as reduce.
Conflict in state 111 between rule 57 and token ANDBIT resolved as shift.
Conflict in state 111 between rule 57 and token XORBIT resolved as shift.
Conflict in state 111 between rule 57 and token PLUS resolved as reduce.
Conflict in state 111 between rule 57 and token MINUS resolved as reduce.
Conflict in state 111 between rule 57 and token MULTIPLY resolved as reduce.
Conflict in state 111 between rule 57 and token DIVIDE resolved as reduce.
Conflict in state 112 between rule 51 and token OR resolved as reduce.
Conflict in state 112 between rule 51 and token ORBIT resolved as reduce.
Conflict in state 112 between rule 51 and token AND resolved as reduce.
Conflict in state 112 between rule 51 and token ANDBIT resolved as reduce.
Conflict in state 112 between rule 51 and token XORBIT resolved as reduce.
Conflict in state 112 between rule 51 and token PLUS resolved as reduce.
Conflict in state 112 between rule 51 and token MINUS resolved as reduce.
Conflict in state 112 between rule 51 and token MULTIPLY resolved as reduce.
Conflict in state 112 between rule 51 and token DIVIDE resolved as reduce.
Conflict in state 113 between rule 55 and token OR resolved as reduce.
Conflict in state 113 between rule 55 and token ORBIT resolved as reduce.
Conflict in state 113 between rule 55 and token AND resolved as reduce.
Conflict in state 113 between rule 55 and token ANDBIT resolved as reduce.
Conflict in state 113 between rule 55 and token XORBIT resolved as reduce.
Conflict in state 113 between rule 55 and token PLUS resolved as reduce.
Conflict in state 113 between rule 55 and token MINUS resolved as reduce.
Conflict in state 113 between rule 55 and token MULTIPLY resolved as reduce.
Conflict in state 113 between rule 55 and token DIVIDE resolved as reduce.
Conflict in state 114 between rule 43 and token OR resolved as shift.
Conflict in state 114 between rule 43 and token ORBIT resolved as shift.
Conflict in state 114 between rule 43 and token AND resolved as shift.
Conflict in state 114 between rule 43 and token ANDBIT resolved as shift.
Conflict in state 114 between rule 43 and token XORBIT resolved as shift.
Conflict in state 114 between rule 43 and token PLUS resolved as reduce.
Conflict in state 114 between rule 43 and token MINUS resolved as reduce.
Conflict in state 114 between rule 43 and token MULTIPLY resolved as shift.
Conflict in state 114 between rule 43 and token DIVIDE resolved as shift.
Conflict in state 115 between rule 45 and token OR resolved as shift.
Conflict in state 115 between rule 45 and token ORBIT resolved as shift.
Conflict in state 115 between rule 45 and token AND resolved as shift.
Conflict in state 115 between rule 45 and token ANDBIT resolved as shift.
Conflict in state 115 between rule 45 and token XORBIT resolved as shift.
Conflict in state 115 between rule 45 and token PLUS resolved as reduce.
Conflict in state 115 between rule 45 and token MINUS resolved as reduce.
Conflict in state 115 between rule 45 and token MULTIPLY resolved as shift.
Conflict in state 115 between rule 45 and token DIVIDE resolved as shift.
Conflict in state 116 between rule 47 and token OR resolved as shift.
Conflict in state 116 between rule 47 and token ORBIT resolved as shift.
Conflict in state 116 between rule 47 and token AND resolved as shift.
Conflict in state 116 between rule 47 and token ANDBIT resolved as shift.
Conflict in state 116 between rule 47 and token XORBIT resolved as shift.
Conflict in state 116 between rule 47 and token PLUS resolved as reduce.
Conflict in state 116 between rule 47 and token MINUS resolved as reduce.
Conflict in state 116 between rule 47 and token MULTIPLY resolved as reduce.
Conflict in state 116 between rule 47 and token DIVIDE resolved as reduce.
Conflict in state 117 between rule 49 and token OR resolved as shift.
Conflict in state 117 between rule 49 and token ORBIT resolved as shift.
Conflict in state 117 between rule 49 and token AND resolved as shift.
Conflict in state 117 between rule 49 and token ANDBIT resolved as shift.
Conflict in state 117 between rule 49 and token XORBIT resolved as shift.
Conflict in state 117 between rule 49 and token PLUS resolved as reduce.
Conflict in state 117 between rule 49 and token MINUS resolved as reduce.
Conflict in state 117 between rule 49 and token MULTIPLY resolved as reduce.
Conflict in state 117 between rule 49 and token DIVIDE resolved as reduce.
State 109 contains 6 shift/reduce conflicts.
State 110 contains 6 shift/reduce conflicts.
State 111 contains 6 shift/reduce conflicts.
State 112 contains 6 shift/reduce conflicts.
State 113 contains 6 shift/reduce conflicts.
State 114 contains 6 shift/reduce conflicts.
State 115 contains 6 shift/reduce conflicts.
State 116 contains 6 shift/reduce conflicts.
State 117 contains 6 shift/reduce conflicts.
State 118 contains 15 shift/reduce conflicts.
State 151 contains 1 reduce/reduce conflict.

Grammar
rule 1    S ->		/* empty */
rule 2    S -> M
rule 3    M -> FUNC M
rule 4    M -> INT MAIN LEFTPAREN RIGHTPAREN BSTMTSB
rule 5    @1 ->		/* empty */
rule 6    BSTMTSB -> LEFTB STMTS @1 RIGHTB
rule 7    STMTS -> STMT STMTS
rule 8    STMTS -> STMT
rule 9    STMT -> IFSTMT
rule 10   STMT -> FORSTMT
rule 11   STMT -> WHILESTMT
rule 12   STMT -> VARDEF
rule 13   STMT -> STEP DOT
rule 14   STMT -> RETURN EXPR DOT
rule 15   STMT -> BREAK DOT
rule 16   STMT -> CONTINUE DOT
rule 17   @2 ->		/* empty */
rule 18   @3 ->		/* empty */
rule 19   FUNC -> TYPE @2 IDENTIFIER @3 FUNCARGS BSTMTSB
rule 20   FUNCARGS -> LEFTPAREN RIGHTPAREN
rule 21   FUNCARGS -> LEFTPAREN TYPE IDENTIFIER RIGHTPAREN
rule 22   FUNCARGS -> LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN
rule 23   FUNCARGS -> LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN
rule 24   FUNCCALL -> IDENTIFIER LEFTPAREN EXPR RIGHTPAREN
rule 25   FUNCCALL -> IDENTIFIER LEFTPAREN EXPR COMMA EXPR RIGHTPAREN
rule 26   FUNCCALL -> IDENTIFIER LEFTPAREN EXPR COMMA EXPR COMMA EXPR RIGHTPAREN
rule 27   TYPE -> VOID
rule 28   TYPE -> CHAR
rule 29   TYPE -> INT
rule 30   TYPED -> CHAR
rule 31   TYPED -> INT
rule 32   @4 ->		/* empty */
rule 33   @5 ->		/* empty */
rule 34   VARDEF -> TYPED @4 IDENTIFIER @5 VARDEFFIN
rule 35   VARDEFFIN -> DOT
rule 36   @6 ->		/* empty */
rule 37   @7 ->		/* empty */
rule 38   VARDEFFIN -> ASSIGN @6 EXPR @7 DOT
rule 39   @8 ->		/* empty */
rule 40   @9 ->		/* empty */
rule 41   STEP -> IDENTIFIER @8 ASSIGN @9 EXPR
rule 42   @10 ->		/* empty */
rule 43   EXPR -> EXPR PLUS @10 EXPR
rule 44   @11 ->		/* empty */
rule 45   EXPR -> EXPR MINUS @11 EXPR
rule 46   @12 ->		/* empty */
rule 47   EXPR -> EXPR MULTIPLY @12 EXPR
rule 48   @13 ->		/* empty */
rule 49   EXPR -> EXPR DIVIDE @13 EXPR
rule 50   @14 ->		/* empty */
rule 51   EXPR -> EXPR ANDBIT @14 EXPR
rule 52   @15 ->		/* empty */
rule 53   EXPR -> EXPR ORBIT @15 EXPR
rule 54   @16 ->		/* empty */
rule 55   EXPR -> EXPR XORBIT @16 EXPR
rule 56   @17 ->		/* empty */
rule 57   EXPR -> EXPR AND @17 EXPR
rule 58   @18 ->		/* empty */
rule 59   EXPR -> EXPR OR @18 EXPR
rule 60   @19 ->		/* empty */
rule 61   EXPR -> EXPR COMPOP @19 EXPR
rule 62   EXPR -> INT_CONST
rule 63   EXPR -> CHAR_CONST
rule 64   EXPR -> IDENTIFIER
rule 65   EXPR -> FUNCCALL
rule 66   EXPR -> LEFTPAREN EXPR RIGHTPAREN
rule 67   EXPR -> NOT LEFTPAREN EXPR RIGHTPAREN
rule 68   COMPOP -> LEFTB
rule 69   COMPOP -> RIGHTB
rule 70   COMPOP -> ISLESSEQ
rule 71   COMPOP -> ISMOREQ
rule 72   COMPOP -> ISEQL
rule 73   COMPOP -> ISNEQL
rule 74   @20 ->		/* empty */
rule 75   IFSTMT -> IF LEFTPAREN EXPR RIGHTPAREN @20 BSTMTSB IFSTMTEND
rule 76   IFSTMTEND ->		/* empty */
rule 77   @21 ->		/* empty */
rule 78   IFSTMTEND -> ELSE @21 BSTMTSB
rule 79   @22 ->		/* empty */
rule 80   IFSTMTEND -> ELIFSTMTS ELSE @22 BSTMTSB
rule 81   ELIFSTMTS -> ELIFSTMT ELIFSTMTS
rule 82   ELIFSTMTS -> ELIFSTMT
rule 83   @23 ->		/* empty */
rule 84   ELIFSTMT -> ELSEIF LEFTPAREN EXPR RIGHTPAREN @23 BSTMTSB
rule 85   @24 ->		/* empty */
rule 86   @25 ->		/* empty */
rule 87   WHILESTMT -> @24 WHILE LEFTPAREN EXPR RIGHTPAREN @25 LEFTB WSTMTS RIGHTB
rule 88   WSTMTS -> STMTS
rule 89   WSTMTS -> STMT
rule 90   @26 ->		/* empty */
rule 91   FORSTMT -> FOR LEFTPAREN @26 VARDEF DOT EXPR DOT STEP RIGHTPAREN BSTMTSB

Terminals, with rules where they appear

$ (-1)
error (256)
MAIN (258) 4
INT (259) 4 29 31
CHAR (260) 28 30
IF (261) 75
ELSE (262) 78 80
ELSEIF (263) 84
WHILE (264) 87
CONTINUE (265) 16
BREAK (266) 15
FOR (267) 91
RETURN (268) 14
VOID (269) 27
IDENTIFIER (270) 19 21 22 23 24 25 26 34 41 64
INT_CONST (271) 62
CHAR_CONST (272) 63
DOT (273) 13 14 15 16 35 38 91
COMMA (274) 22 23 25 26
ISLESSEQ (275) 70
ISMOREQ (276) 71
ISEQL (277) 72
ISNEQL (278) 73
ASSIGN (279) 38 41
LEFTB (280) 6 68 87
RIGHTB (281) 6 69 87
OR (282) 59
ORBIT (283) 53
AND (284) 57
ANDBIT (285) 51
XORBIT (286) 55
NOT (287) 67
PLUS (288) 43
MINUS (289) 45
MULTIPLY (290) 47
DIVIDE (291) 49
LEFTPAREN (292) 4 20 21 22 23 24 25 26 66 67 75 84 87 91
RIGHTPAREN (293) 4 20 21 22 23 24 25 26 66 67 75 84 87 91
LEFTBRACE (294)
RIGHTBRACE (295)

Nonterminals, with rules where they appear

S (41)
    on left: 1 2
M (42)
    on left: 3 4, on right: 2 3
BSTMTSB (43)
    on left: 6, on right: 4 19 75 78 80 84 91
@1 (44)
    on left: 5, on right: 6
STMTS (45)
    on left: 7 8, on right: 6 7 88
STMT (46)
    on left: 9 10 11 12 13 14 15 16, on right: 7 8 89
FUNC (47)
    on left: 19, on right: 3
@2 (48)
    on left: 17, on right: 19
@3 (49)
    on left: 18, on right: 19
FUNCARGS (50)
    on left: 20 21 22 23, on right: 19
FUNCCALL (51)
    on left: 24 25 26, on right: 65
TYPE (52)
    on left: 27 28 29, on right: 19 21 22 23
TYPED (53)
    on left: 30 31, on right: 34
VARDEF (54)
    on left: 34, on right: 12 91
@4 (55)
    on left: 32, on right: 34
@5 (56)
    on left: 33, on right: 34
VARDEFFIN (57)
    on left: 35 38, on right: 34
@6 (58)
    on left: 36, on right: 38
@7 (59)
    on left: 37, on right: 38
STEP (60)
    on left: 41, on right: 13 91
@8 (61)
    on left: 39, on right: 41
@9 (62)
    on left: 40, on right: 41
EXPR (63)
    on left: 43 45 47 49 51 53 55 57 59 61 62 63 64 65 66 67,
    on right: 14 24 25 26 38 41 43 45 47 49 51 53 55 57 59 61 66 67
    75 84 87 91
@10 (64)
    on left: 42, on right: 43
@11 (65)
    on left: 44, on right: 45
@12 (66)
    on left: 46, on right: 47
@13 (67)
    on left: 48, on right: 49
@14 (68)
    on left: 50, on right: 51
@15 (69)
    on left: 52, on right: 53
@16 (70)
    on left: 54, on right: 55
@17 (71)
    on left: 56, on right: 57
@18 (72)
    on left: 58, on right: 59
@19 (73)
    on left: 60, on right: 61
COMPOP (74)
    on left: 68 69 70 71 72 73, on right: 61
IFSTMT (75)
    on left: 75, on right: 9
@20 (76)
    on left: 74, on right: 75
IFSTMTEND (77)
    on left: 76 78 80, on right: 75
@21 (78)
    on left: 77, on right: 78
@22 (79)
    on left: 79, on right: 80
ELIFSTMTS (80)
    on left: 81 82, on right: 80 81
ELIFSTMT (81)
    on left: 84, on right: 81 82
@23 (82)
    on left: 83, on right: 84
WHILESTMT (83)
    on left: 87, on right: 11
@24 (84)
    on left: 85, on right: 87
@25 (85)
    on left: 86, on right: 87
WSTMTS (86)
    on left: 88 89, on right: 87
FORSTMT (87)
    on left: 91, on right: 10
@26 (88)
    on left: 90, on right: 91


state 0

    INT 	shift, and go to state 1
    CHAR	shift, and go to state 2
    VOID	shift, and go to state 3

    $default	reduce using rule 1 (S)

    S   	go to state 167
    M   	go to state 4
    FUNC	go to state 5
    TYPE	go to state 6



state 1

    M  ->  INT . MAIN LEFTPAREN RIGHTPAREN BSTMTSB   (rule 4)
    TYPE  ->  INT .   (rule 29)

    MAIN	shift, and go to state 7

    $default	reduce using rule 29 (TYPE)



state 2

    TYPE  ->  CHAR .   (rule 28)

    $default	reduce using rule 28 (TYPE)



state 3

    TYPE  ->  VOID .   (rule 27)

    $default	reduce using rule 27 (TYPE)



state 4

    S  ->  M .   (rule 2)

    $default	reduce using rule 2 (S)



state 5

    M  ->  FUNC . M   (rule 3)

    INT 	shift, and go to state 1
    CHAR	shift, and go to state 2
    VOID	shift, and go to state 3

    M   	go to state 8
    FUNC	go to state 5
    TYPE	go to state 6



state 6

    FUNC  ->  TYPE . @2 IDENTIFIER @3 FUNCARGS BSTMTSB   (rule 19)

    $default	reduce using rule 17 (@2)

    @2  	go to state 9



state 7

    M  ->  INT MAIN . LEFTPAREN RIGHTPAREN BSTMTSB   (rule 4)

    LEFTPAREN	shift, and go to state 10



state 8

    M  ->  FUNC M .   (rule 3)

    $default	reduce using rule 3 (M)



state 9

    FUNC  ->  TYPE @2 . IDENTIFIER @3 FUNCARGS BSTMTSB   (rule 19)

    IDENTIFIER	shift, and go to state 11



state 10

    M  ->  INT MAIN LEFTPAREN . RIGHTPAREN BSTMTSB   (rule 4)

    RIGHTPAREN	shift, and go to state 12



state 11

    FUNC  ->  TYPE @2 IDENTIFIER . @3 FUNCARGS BSTMTSB   (rule 19)

    $default	reduce using rule 18 (@3)

    @3  	go to state 13



state 12

    M  ->  INT MAIN LEFTPAREN RIGHTPAREN . BSTMTSB   (rule 4)

    LEFTB	shift, and go to state 14

    BSTMTSB	go to state 15



state 13

    FUNC  ->  TYPE @2 IDENTIFIER @3 . FUNCARGS BSTMTSB   (rule 19)

    LEFTPAREN	shift, and go to state 16

    FUNCARGS	go to state 17



state 14

    BSTMTSB  ->  LEFTB . STMTS @1 RIGHTB   (rule 6)

    INT 	shift, and go to state 18
    CHAR	shift, and go to state 19
    IF  	shift, and go to state 20
    CONTINUE	shift, and go to state 21
    BREAK	shift, and go to state 22
    FOR 	shift, and go to state 23
    RETURN	shift, and go to state 24
    IDENTIFIER	shift, and go to state 25

    $default	reduce using rule 85 (@24)

    STMTS	go to state 26
    STMT	go to state 27
    TYPED	go to state 28
    VARDEF	go to state 29
    STEP	go to state 30
    IFSTMT	go to state 31
    WHILESTMT	go to state 32
    @24 	go to state 33
    FORSTMT	go to state 34



state 15

    M  ->  INT MAIN LEFTPAREN RIGHTPAREN BSTMTSB .   (rule 4)

    $default	reduce using rule 4 (M)



state 16

    FUNCARGS  ->  LEFTPAREN . RIGHTPAREN   (rule 20)
    FUNCARGS  ->  LEFTPAREN . TYPE IDENTIFIER RIGHTPAREN   (rule 21)
    FUNCARGS  ->  LEFTPAREN . TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 22)
    FUNCARGS  ->  LEFTPAREN . TYPE IDENTIFIER COMMA TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 23)

    INT 	shift, and go to state 35
    CHAR	shift, and go to state 2
    VOID	shift, and go to state 3
    RIGHTPAREN	shift, and go to state 36

    TYPE	go to state 37



state 17

    FUNC  ->  TYPE @2 IDENTIFIER @3 FUNCARGS . BSTMTSB   (rule 19)

    LEFTB	shift, and go to state 14

    BSTMTSB	go to state 38



state 18

    TYPED  ->  INT .   (rule 31)

    $default	reduce using rule 31 (TYPED)



state 19

    TYPED  ->  CHAR .   (rule 30)

    $default	reduce using rule 30 (TYPED)



state 20

    IFSTMT  ->  IF . LEFTPAREN EXPR RIGHTPAREN @20 BSTMTSB IFSTMTEND   (rule 75)

    LEFTPAREN	shift, and go to state 39



state 21

    STMT  ->  CONTINUE . DOT   (rule 16)

    DOT 	shift, and go to state 40



state 22

    STMT  ->  BREAK . DOT   (rule 15)

    DOT 	shift, and go to state 41



state 23

    FORSTMT  ->  FOR . LEFTPAREN @26 VARDEF DOT EXPR DOT STEP RIGHTPAREN BSTMTSB   (rule 91)

    LEFTPAREN	shift, and go to state 42



state 24

    STMT  ->  RETURN . EXPR DOT   (rule 14)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 49



state 25

    STEP  ->  IDENTIFIER . @8 ASSIGN @9 EXPR   (rule 41)

    $default	reduce using rule 39 (@8)

    @8  	go to state 50



state 26

    BSTMTSB  ->  LEFTB STMTS . @1 RIGHTB   (rule 6)

    $default	reduce using rule 5 (@1)

    @1  	go to state 51



state 27

    STMTS  ->  STMT . STMTS   (rule 7)
    STMTS  ->  STMT .   (rule 8)

    INT 	shift, and go to state 18
    CHAR	shift, and go to state 19
    IF  	shift, and go to state 20
    CONTINUE	shift, and go to state 21
    BREAK	shift, and go to state 22
    FOR 	shift, and go to state 23
    RETURN	shift, and go to state 24
    IDENTIFIER	shift, and go to state 25

    WHILE	reduce using rule 85 (@24)
    $default	reduce using rule 8 (STMTS)

    STMTS	go to state 52
    STMT	go to state 27
    TYPED	go to state 28
    VARDEF	go to state 29
    STEP	go to state 30
    IFSTMT	go to state 31
    WHILESTMT	go to state 32
    @24 	go to state 33
    FORSTMT	go to state 34



state 28

    VARDEF  ->  TYPED . @4 IDENTIFIER @5 VARDEFFIN   (rule 34)

    $default	reduce using rule 32 (@4)

    @4  	go to state 53



state 29

    STMT  ->  VARDEF .   (rule 12)

    $default	reduce using rule 12 (STMT)



state 30

    STMT  ->  STEP . DOT   (rule 13)

    DOT 	shift, and go to state 54



state 31

    STMT  ->  IFSTMT .   (rule 9)

    $default	reduce using rule 9 (STMT)



state 32

    STMT  ->  WHILESTMT .   (rule 11)

    $default	reduce using rule 11 (STMT)



state 33

    WHILESTMT  ->  @24 . WHILE LEFTPAREN EXPR RIGHTPAREN @25 LEFTB WSTMTS RIGHTB   (rule 87)

    WHILE	shift, and go to state 55



state 34

    STMT  ->  FORSTMT .   (rule 10)

    $default	reduce using rule 10 (STMT)



state 35

    TYPE  ->  INT .   (rule 29)

    $default	reduce using rule 29 (TYPE)



state 36

    FUNCARGS  ->  LEFTPAREN RIGHTPAREN .   (rule 20)

    $default	reduce using rule 20 (FUNCARGS)



state 37

    FUNCARGS  ->  LEFTPAREN TYPE . IDENTIFIER RIGHTPAREN   (rule 21)
    FUNCARGS  ->  LEFTPAREN TYPE . IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 22)
    FUNCARGS  ->  LEFTPAREN TYPE . IDENTIFIER COMMA TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 23)

    IDENTIFIER	shift, and go to state 56



state 38

    FUNC  ->  TYPE @2 IDENTIFIER @3 FUNCARGS BSTMTSB .   (rule 19)

    $default	reduce using rule 19 (FUNC)



state 39

    IFSTMT  ->  IF LEFTPAREN . EXPR RIGHTPAREN @20 BSTMTSB IFSTMTEND   (rule 75)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 57



state 40

    STMT  ->  CONTINUE DOT .   (rule 16)

    $default	reduce using rule 16 (STMT)



state 41

    STMT  ->  BREAK DOT .   (rule 15)

    $default	reduce using rule 15 (STMT)



state 42

    FORSTMT  ->  FOR LEFTPAREN . @26 VARDEF DOT EXPR DOT STEP RIGHTPAREN BSTMTSB   (rule 91)

    $default	reduce using rule 90 (@26)

    @26 	go to state 58



state 43

    FUNCCALL  ->  IDENTIFIER . LEFTPAREN EXPR RIGHTPAREN   (rule 24)
    FUNCCALL  ->  IDENTIFIER . LEFTPAREN EXPR COMMA EXPR RIGHTPAREN   (rule 25)
    FUNCCALL  ->  IDENTIFIER . LEFTPAREN EXPR COMMA EXPR COMMA EXPR RIGHTPAREN   (rule 26)
    EXPR  ->  IDENTIFIER .   (rule 64)

    LEFTPAREN	shift, and go to state 59

    $default	reduce using rule 64 (EXPR)



state 44

    EXPR  ->  INT_CONST .   (rule 62)

    $default	reduce using rule 62 (EXPR)



state 45

    EXPR  ->  CHAR_CONST .   (rule 63)

    $default	reduce using rule 63 (EXPR)



state 46

    EXPR  ->  NOT . LEFTPAREN EXPR RIGHTPAREN   (rule 67)

    LEFTPAREN	shift, and go to state 60



state 47

    EXPR  ->  LEFTPAREN . EXPR RIGHTPAREN   (rule 66)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 61



state 48

    EXPR  ->  FUNCCALL .   (rule 65)

    $default	reduce using rule 65 (EXPR)



state 49

    STMT  ->  RETURN EXPR . DOT   (rule 14)
    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    DOT 	shift, and go to state 62
    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77

    COMPOP	go to state 78



state 50

    STEP  ->  IDENTIFIER @8 . ASSIGN @9 EXPR   (rule 41)

    ASSIGN	shift, and go to state 79



state 51

    BSTMTSB  ->  LEFTB STMTS @1 . RIGHTB   (rule 6)

    RIGHTB	shift, and go to state 80



state 52

    STMTS  ->  STMT STMTS .   (rule 7)

    $default	reduce using rule 7 (STMTS)



state 53

    VARDEF  ->  TYPED @4 . IDENTIFIER @5 VARDEFFIN   (rule 34)

    IDENTIFIER	shift, and go to state 81



state 54

    STMT  ->  STEP DOT .   (rule 13)

    $default	reduce using rule 13 (STMT)



state 55

    WHILESTMT  ->  @24 WHILE . LEFTPAREN EXPR RIGHTPAREN @25 LEFTB WSTMTS RIGHTB   (rule 87)

    LEFTPAREN	shift, and go to state 82



state 56

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER . RIGHTPAREN   (rule 21)
    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER . COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 22)
    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER . COMMA TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 23)

    COMMA	shift, and go to state 83
    RIGHTPAREN	shift, and go to state 84



state 57

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)
    IFSTMT  ->  IF LEFTPAREN EXPR . RIGHTPAREN @20 BSTMTSB IFSTMTEND   (rule 75)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77
    RIGHTPAREN	shift, and go to state 85

    COMPOP	go to state 78



state 58

    FORSTMT  ->  FOR LEFTPAREN @26 . VARDEF DOT EXPR DOT STEP RIGHTPAREN BSTMTSB   (rule 91)

    INT 	shift, and go to state 18
    CHAR	shift, and go to state 19

    TYPED	go to state 28
    VARDEF	go to state 86



state 59

    FUNCCALL  ->  IDENTIFIER LEFTPAREN . EXPR RIGHTPAREN   (rule 24)
    FUNCCALL  ->  IDENTIFIER LEFTPAREN . EXPR COMMA EXPR RIGHTPAREN   (rule 25)
    FUNCCALL  ->  IDENTIFIER LEFTPAREN . EXPR COMMA EXPR COMMA EXPR RIGHTPAREN   (rule 26)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 87



state 60

    EXPR  ->  NOT LEFTPAREN . EXPR RIGHTPAREN   (rule 67)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 88



state 61

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)
    EXPR  ->  LEFTPAREN EXPR . RIGHTPAREN   (rule 66)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77
    RIGHTPAREN	shift, and go to state 89

    COMPOP	go to state 78



state 62

    STMT  ->  RETURN EXPR DOT .   (rule 14)

    $default	reduce using rule 14 (STMT)



state 63

    COMPOP  ->  ISLESSEQ .   (rule 70)

    $default	reduce using rule 70 (COMPOP)



state 64

    COMPOP  ->  ISMOREQ .   (rule 71)

    $default	reduce using rule 71 (COMPOP)



state 65

    COMPOP  ->  ISEQL .   (rule 72)

    $default	reduce using rule 72 (COMPOP)



state 66

    COMPOP  ->  ISNEQL .   (rule 73)

    $default	reduce using rule 73 (COMPOP)



state 67

    COMPOP  ->  LEFTB .   (rule 68)

    $default	reduce using rule 68 (COMPOP)



state 68

    COMPOP  ->  RIGHTB .   (rule 69)

    $default	reduce using rule 69 (COMPOP)



state 69

    EXPR  ->  EXPR OR . @18 EXPR   (rule 59)

    $default	reduce using rule 58 (@18)

    @18 	go to state 90



state 70

    EXPR  ->  EXPR ORBIT . @15 EXPR   (rule 53)

    $default	reduce using rule 52 (@15)

    @15 	go to state 91



state 71

    EXPR  ->  EXPR AND . @17 EXPR   (rule 57)

    $default	reduce using rule 56 (@17)

    @17 	go to state 92



state 72

    EXPR  ->  EXPR ANDBIT . @14 EXPR   (rule 51)

    $default	reduce using rule 50 (@14)

    @14 	go to state 93



state 73

    EXPR  ->  EXPR XORBIT . @16 EXPR   (rule 55)

    $default	reduce using rule 54 (@16)

    @16 	go to state 94



state 74

    EXPR  ->  EXPR PLUS . @10 EXPR   (rule 43)

    $default	reduce using rule 42 (@10)

    @10 	go to state 95



state 75

    EXPR  ->  EXPR MINUS . @11 EXPR   (rule 45)

    $default	reduce using rule 44 (@11)

    @11 	go to state 96



state 76

    EXPR  ->  EXPR MULTIPLY . @12 EXPR   (rule 47)

    $default	reduce using rule 46 (@12)

    @12 	go to state 97



state 77

    EXPR  ->  EXPR DIVIDE . @13 EXPR   (rule 49)

    $default	reduce using rule 48 (@13)

    @13 	go to state 98



state 78

    EXPR  ->  EXPR COMPOP . @19 EXPR   (rule 61)

    $default	reduce using rule 60 (@19)

    @19 	go to state 99



state 79

    STEP  ->  IDENTIFIER @8 ASSIGN . @9 EXPR   (rule 41)

    $default	reduce using rule 40 (@9)

    @9  	go to state 100



state 80

    BSTMTSB  ->  LEFTB STMTS @1 RIGHTB .   (rule 6)

    $default	reduce using rule 6 (BSTMTSB)



state 81

    VARDEF  ->  TYPED @4 IDENTIFIER . @5 VARDEFFIN   (rule 34)

    $default	reduce using rule 33 (@5)

    @5  	go to state 101



state 82

    WHILESTMT  ->  @24 WHILE LEFTPAREN . EXPR RIGHTPAREN @25 LEFTB WSTMTS RIGHTB   (rule 87)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 102



state 83

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA . TYPE IDENTIFIER RIGHTPAREN   (rule 22)
    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA . TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 23)

    INT 	shift, and go to state 35
    CHAR	shift, and go to state 2
    VOID	shift, and go to state 3

    TYPE	go to state 103



state 84

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER RIGHTPAREN .   (rule 21)

    $default	reduce using rule 21 (FUNCARGS)



state 85

    IFSTMT  ->  IF LEFTPAREN EXPR RIGHTPAREN . @20 BSTMTSB IFSTMTEND   (rule 75)

    $default	reduce using rule 74 (@20)

    @20 	go to state 104



state 86

    FORSTMT  ->  FOR LEFTPAREN @26 VARDEF . DOT EXPR DOT STEP RIGHTPAREN BSTMTSB   (rule 91)

    DOT 	shift, and go to state 105



state 87

    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR . RIGHTPAREN   (rule 24)
    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR . COMMA EXPR RIGHTPAREN   (rule 25)
    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR . COMMA EXPR COMMA EXPR RIGHTPAREN   (rule 26)
    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    COMMA	shift, and go to state 106
    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77
    RIGHTPAREN	shift, and go to state 107

    COMPOP	go to state 78



state 88

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)
    EXPR  ->  NOT LEFTPAREN EXPR . RIGHTPAREN   (rule 67)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77
    RIGHTPAREN	shift, and go to state 108

    COMPOP	go to state 78



state 89

    EXPR  ->  LEFTPAREN EXPR RIGHTPAREN .   (rule 66)

    $default	reduce using rule 66 (EXPR)



state 90

    EXPR  ->  EXPR OR @18 . EXPR   (rule 59)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 109



state 91

    EXPR  ->  EXPR ORBIT @15 . EXPR   (rule 53)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 110



state 92

    EXPR  ->  EXPR AND @17 . EXPR   (rule 57)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 111



state 93

    EXPR  ->  EXPR ANDBIT @14 . EXPR   (rule 51)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 112



state 94

    EXPR  ->  EXPR XORBIT @16 . EXPR   (rule 55)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 113



state 95

    EXPR  ->  EXPR PLUS @10 . EXPR   (rule 43)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 114



state 96

    EXPR  ->  EXPR MINUS @11 . EXPR   (rule 45)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 115



state 97

    EXPR  ->  EXPR MULTIPLY @12 . EXPR   (rule 47)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 116



state 98

    EXPR  ->  EXPR DIVIDE @13 . EXPR   (rule 49)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 117



state 99

    EXPR  ->  EXPR COMPOP @19 . EXPR   (rule 61)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 118



state 100

    STEP  ->  IDENTIFIER @8 ASSIGN @9 . EXPR   (rule 41)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 119



state 101

    VARDEF  ->  TYPED @4 IDENTIFIER @5 . VARDEFFIN   (rule 34)

    DOT 	shift, and go to state 120
    ASSIGN	shift, and go to state 121

    VARDEFFIN	go to state 122



state 102

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)
    WHILESTMT  ->  @24 WHILE LEFTPAREN EXPR . RIGHTPAREN @25 LEFTB WSTMTS RIGHTB   (rule 87)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77
    RIGHTPAREN	shift, and go to state 123

    COMPOP	go to state 78



state 103

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE . IDENTIFIER RIGHTPAREN   (rule 22)
    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE . IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 23)

    IDENTIFIER	shift, and go to state 124



state 104

    IFSTMT  ->  IF LEFTPAREN EXPR RIGHTPAREN @20 . BSTMTSB IFSTMTEND   (rule 75)

    LEFTB	shift, and go to state 14

    BSTMTSB	go to state 125



state 105

    FORSTMT  ->  FOR LEFTPAREN @26 VARDEF DOT . EXPR DOT STEP RIGHTPAREN BSTMTSB   (rule 91)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 126



state 106

    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR COMMA . EXPR RIGHTPAREN   (rule 25)
    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR COMMA . EXPR COMMA EXPR RIGHTPAREN   (rule 26)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 127



state 107

    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR RIGHTPAREN .   (rule 24)

    $default	reduce using rule 24 (FUNCCALL)



state 108

    EXPR  ->  NOT LEFTPAREN EXPR RIGHTPAREN .   (rule 67)

    $default	reduce using rule 67 (EXPR)



state 109

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR OR @18 EXPR .   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    ORBIT	shift, and go to state 70
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73

    ISLESSEQ	[reduce using rule 59 (EXPR)]
    ISMOREQ	[reduce using rule 59 (EXPR)]
    ISEQL	[reduce using rule 59 (EXPR)]
    ISNEQL	[reduce using rule 59 (EXPR)]
    LEFTB	[reduce using rule 59 (EXPR)]
    RIGHTB	[reduce using rule 59 (EXPR)]
    $default	reduce using rule 59 (EXPR)

    COMPOP	go to state 78



state 110

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR ORBIT @15 EXPR .   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68

    ISLESSEQ	[reduce using rule 53 (EXPR)]
    ISMOREQ	[reduce using rule 53 (EXPR)]
    ISEQL	[reduce using rule 53 (EXPR)]
    ISNEQL	[reduce using rule 53 (EXPR)]
    LEFTB	[reduce using rule 53 (EXPR)]
    RIGHTB	[reduce using rule 53 (EXPR)]
    $default	reduce using rule 53 (EXPR)

    COMPOP	go to state 78



state 111

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR AND @17 EXPR .   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    ORBIT	shift, and go to state 70
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73

    ISLESSEQ	[reduce using rule 57 (EXPR)]
    ISMOREQ	[reduce using rule 57 (EXPR)]
    ISEQL	[reduce using rule 57 (EXPR)]
    ISNEQL	[reduce using rule 57 (EXPR)]
    LEFTB	[reduce using rule 57 (EXPR)]
    RIGHTB	[reduce using rule 57 (EXPR)]
    $default	reduce using rule 57 (EXPR)

    COMPOP	go to state 78



state 112

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR ANDBIT @14 EXPR .   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68

    ISLESSEQ	[reduce using rule 51 (EXPR)]
    ISMOREQ	[reduce using rule 51 (EXPR)]
    ISEQL	[reduce using rule 51 (EXPR)]
    ISNEQL	[reduce using rule 51 (EXPR)]
    LEFTB	[reduce using rule 51 (EXPR)]
    RIGHTB	[reduce using rule 51 (EXPR)]
    $default	reduce using rule 51 (EXPR)

    COMPOP	go to state 78



state 113

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR XORBIT @16 EXPR .   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68

    ISLESSEQ	[reduce using rule 55 (EXPR)]
    ISMOREQ	[reduce using rule 55 (EXPR)]
    ISEQL	[reduce using rule 55 (EXPR)]
    ISNEQL	[reduce using rule 55 (EXPR)]
    LEFTB	[reduce using rule 55 (EXPR)]
    RIGHTB	[reduce using rule 55 (EXPR)]
    $default	reduce using rule 55 (EXPR)

    COMPOP	go to state 78



state 114

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR PLUS @10 EXPR .   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77

    ISLESSEQ	[reduce using rule 43 (EXPR)]
    ISMOREQ	[reduce using rule 43 (EXPR)]
    ISEQL	[reduce using rule 43 (EXPR)]
    ISNEQL	[reduce using rule 43 (EXPR)]
    LEFTB	[reduce using rule 43 (EXPR)]
    RIGHTB	[reduce using rule 43 (EXPR)]
    $default	reduce using rule 43 (EXPR)

    COMPOP	go to state 78



state 115

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR MINUS @11 EXPR .   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77

    ISLESSEQ	[reduce using rule 45 (EXPR)]
    ISMOREQ	[reduce using rule 45 (EXPR)]
    ISEQL	[reduce using rule 45 (EXPR)]
    ISNEQL	[reduce using rule 45 (EXPR)]
    LEFTB	[reduce using rule 45 (EXPR)]
    RIGHTB	[reduce using rule 45 (EXPR)]
    $default	reduce using rule 45 (EXPR)

    COMPOP	go to state 78



state 116

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR MULTIPLY @12 EXPR .   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73

    ISLESSEQ	[reduce using rule 47 (EXPR)]
    ISMOREQ	[reduce using rule 47 (EXPR)]
    ISEQL	[reduce using rule 47 (EXPR)]
    ISNEQL	[reduce using rule 47 (EXPR)]
    LEFTB	[reduce using rule 47 (EXPR)]
    RIGHTB	[reduce using rule 47 (EXPR)]
    $default	reduce using rule 47 (EXPR)

    COMPOP	go to state 78



state 117

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR DIVIDE @13 EXPR .   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73

    ISLESSEQ	[reduce using rule 49 (EXPR)]
    ISMOREQ	[reduce using rule 49 (EXPR)]
    ISEQL	[reduce using rule 49 (EXPR)]
    ISNEQL	[reduce using rule 49 (EXPR)]
    LEFTB	[reduce using rule 49 (EXPR)]
    RIGHTB	[reduce using rule 49 (EXPR)]
    $default	reduce using rule 49 (EXPR)

    COMPOP	go to state 78



state 118

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)
    EXPR  ->  EXPR COMPOP @19 EXPR .   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77

    ISLESSEQ	[reduce using rule 61 (EXPR)]
    ISMOREQ	[reduce using rule 61 (EXPR)]
    ISEQL	[reduce using rule 61 (EXPR)]
    ISNEQL	[reduce using rule 61 (EXPR)]
    LEFTB	[reduce using rule 61 (EXPR)]
    RIGHTB	[reduce using rule 61 (EXPR)]
    OR  	[reduce using rule 61 (EXPR)]
    ORBIT	[reduce using rule 61 (EXPR)]
    AND 	[reduce using rule 61 (EXPR)]
    ANDBIT	[reduce using rule 61 (EXPR)]
    XORBIT	[reduce using rule 61 (EXPR)]
    PLUS	[reduce using rule 61 (EXPR)]
    MINUS	[reduce using rule 61 (EXPR)]
    MULTIPLY	[reduce using rule 61 (EXPR)]
    DIVIDE	[reduce using rule 61 (EXPR)]
    $default	reduce using rule 61 (EXPR)

    COMPOP	go to state 78



state 119

    STEP  ->  IDENTIFIER @8 ASSIGN @9 EXPR .   (rule 41)
    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77

    $default	reduce using rule 41 (STEP)

    COMPOP	go to state 78



state 120

    VARDEFFIN  ->  DOT .   (rule 35)

    $default	reduce using rule 35 (VARDEFFIN)



state 121

    VARDEFFIN  ->  ASSIGN . @6 EXPR @7 DOT   (rule 38)

    $default	reduce using rule 36 (@6)

    @6  	go to state 128



state 122

    VARDEF  ->  TYPED @4 IDENTIFIER @5 VARDEFFIN .   (rule 34)

    $default	reduce using rule 34 (VARDEF)



state 123

    WHILESTMT  ->  @24 WHILE LEFTPAREN EXPR RIGHTPAREN . @25 LEFTB WSTMTS RIGHTB   (rule 87)

    $default	reduce using rule 86 (@25)

    @25 	go to state 129



state 124

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER . RIGHTPAREN   (rule 22)
    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER . COMMA TYPE IDENTIFIER RIGHTPAREN   (rule 23)

    COMMA	shift, and go to state 130
    RIGHTPAREN	shift, and go to state 131



state 125

    IFSTMT  ->  IF LEFTPAREN EXPR RIGHTPAREN @20 BSTMTSB . IFSTMTEND   (rule 75)

    ELSE	shift, and go to state 132
    ELSEIF	shift, and go to state 133

    $default	reduce using rule 76 (IFSTMTEND)

    IFSTMTEND	go to state 134
    ELIFSTMTS	go to state 135
    ELIFSTMT	go to state 136



state 126

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)
    FORSTMT  ->  FOR LEFTPAREN @26 VARDEF DOT EXPR . DOT STEP RIGHTPAREN BSTMTSB   (rule 91)

    DOT 	shift, and go to state 137
    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77

    COMPOP	go to state 78



state 127

    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR COMMA EXPR . RIGHTPAREN   (rule 25)
    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR COMMA EXPR . COMMA EXPR RIGHTPAREN   (rule 26)
    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    COMMA	shift, and go to state 138
    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77
    RIGHTPAREN	shift, and go to state 139

    COMPOP	go to state 78



state 128

    VARDEFFIN  ->  ASSIGN @6 . EXPR @7 DOT   (rule 38)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 140



state 129

    WHILESTMT  ->  @24 WHILE LEFTPAREN EXPR RIGHTPAREN @25 . LEFTB WSTMTS RIGHTB   (rule 87)

    LEFTB	shift, and go to state 141



state 130

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER COMMA . TYPE IDENTIFIER RIGHTPAREN   (rule 23)

    INT 	shift, and go to state 35
    CHAR	shift, and go to state 2
    VOID	shift, and go to state 3

    TYPE	go to state 142



state 131

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN .   (rule 22)

    $default	reduce using rule 22 (FUNCARGS)



state 132

    IFSTMTEND  ->  ELSE . @21 BSTMTSB   (rule 78)

    $default	reduce using rule 77 (@21)

    @21 	go to state 143



state 133

    ELIFSTMT  ->  ELSEIF . LEFTPAREN EXPR RIGHTPAREN @23 BSTMTSB   (rule 84)

    LEFTPAREN	shift, and go to state 144



state 134

    IFSTMT  ->  IF LEFTPAREN EXPR RIGHTPAREN @20 BSTMTSB IFSTMTEND .   (rule 75)

    $default	reduce using rule 75 (IFSTMT)



state 135

    IFSTMTEND  ->  ELIFSTMTS . ELSE @22 BSTMTSB   (rule 80)

    ELSE	shift, and go to state 145



state 136

    ELIFSTMTS  ->  ELIFSTMT . ELIFSTMTS   (rule 81)
    ELIFSTMTS  ->  ELIFSTMT .   (rule 82)

    ELSEIF	shift, and go to state 133

    $default	reduce using rule 82 (ELIFSTMTS)

    ELIFSTMTS	go to state 146
    ELIFSTMT	go to state 136



state 137

    FORSTMT  ->  FOR LEFTPAREN @26 VARDEF DOT EXPR DOT . STEP RIGHTPAREN BSTMTSB   (rule 91)

    IDENTIFIER	shift, and go to state 25

    STEP	go to state 147



state 138

    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR COMMA EXPR COMMA . EXPR RIGHTPAREN   (rule 26)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 148



state 139

    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR COMMA EXPR RIGHTPAREN .   (rule 25)

    $default	reduce using rule 25 (FUNCCALL)



state 140

    VARDEFFIN  ->  ASSIGN @6 EXPR . @7 DOT   (rule 38)
    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77

    $default	reduce using rule 37 (@7)

    @7  	go to state 149
    COMPOP	go to state 78



state 141

    WHILESTMT  ->  @24 WHILE LEFTPAREN EXPR RIGHTPAREN @25 LEFTB . WSTMTS RIGHTB   (rule 87)

    INT 	shift, and go to state 18
    CHAR	shift, and go to state 19
    IF  	shift, and go to state 20
    CONTINUE	shift, and go to state 21
    BREAK	shift, and go to state 22
    FOR 	shift, and go to state 23
    RETURN	shift, and go to state 24
    IDENTIFIER	shift, and go to state 25

    $default	reduce using rule 85 (@24)

    STMTS	go to state 150
    STMT	go to state 151
    TYPED	go to state 28
    VARDEF	go to state 29
    STEP	go to state 30
    IFSTMT	go to state 31
    WHILESTMT	go to state 32
    @24 	go to state 33
    WSTMTS	go to state 152
    FORSTMT	go to state 34



state 142

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER COMMA TYPE . IDENTIFIER RIGHTPAREN   (rule 23)

    IDENTIFIER	shift, and go to state 153



state 143

    IFSTMTEND  ->  ELSE @21 . BSTMTSB   (rule 78)

    LEFTB	shift, and go to state 14

    BSTMTSB	go to state 154



state 144

    ELIFSTMT  ->  ELSEIF LEFTPAREN . EXPR RIGHTPAREN @23 BSTMTSB   (rule 84)

    IDENTIFIER	shift, and go to state 43
    INT_CONST	shift, and go to state 44
    CHAR_CONST	shift, and go to state 45
    NOT 	shift, and go to state 46
    LEFTPAREN	shift, and go to state 47

    FUNCCALL	go to state 48
    EXPR	go to state 155



state 145

    IFSTMTEND  ->  ELIFSTMTS ELSE . @22 BSTMTSB   (rule 80)

    $default	reduce using rule 79 (@22)

    @22 	go to state 156



state 146

    ELIFSTMTS  ->  ELIFSTMT ELIFSTMTS .   (rule 81)

    $default	reduce using rule 81 (ELIFSTMTS)



state 147

    FORSTMT  ->  FOR LEFTPAREN @26 VARDEF DOT EXPR DOT STEP . RIGHTPAREN BSTMTSB   (rule 91)

    RIGHTPAREN	shift, and go to state 157



state 148

    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR COMMA EXPR COMMA EXPR . RIGHTPAREN   (rule 26)
    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77
    RIGHTPAREN	shift, and go to state 158

    COMPOP	go to state 78



state 149

    VARDEFFIN  ->  ASSIGN @6 EXPR @7 . DOT   (rule 38)

    DOT 	shift, and go to state 159



state 150

    WSTMTS  ->  STMTS .   (rule 88)

    $default	reduce using rule 88 (WSTMTS)



state 151

    STMTS  ->  STMT . STMTS   (rule 7)
    STMTS  ->  STMT .   (rule 8)
    WSTMTS  ->  STMT .   (rule 89)

    INT 	shift, and go to state 18
    CHAR	shift, and go to state 19
    IF  	shift, and go to state 20
    CONTINUE	shift, and go to state 21
    BREAK	shift, and go to state 22
    FOR 	shift, and go to state 23
    RETURN	shift, and go to state 24
    IDENTIFIER	shift, and go to state 25

    WHILE	reduce using rule 85 (@24)
    RIGHTB	reduce using rule 8 (STMTS)
    RIGHTB	[reduce using rule 89 (WSTMTS)]
    $default	reduce using rule 8 (STMTS)

    STMTS	go to state 52
    STMT	go to state 27
    TYPED	go to state 28
    VARDEF	go to state 29
    STEP	go to state 30
    IFSTMT	go to state 31
    WHILESTMT	go to state 32
    @24 	go to state 33
    FORSTMT	go to state 34



state 152

    WHILESTMT  ->  @24 WHILE LEFTPAREN EXPR RIGHTPAREN @25 LEFTB WSTMTS . RIGHTB   (rule 87)

    RIGHTB	shift, and go to state 160



state 153

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER COMMA TYPE IDENTIFIER . RIGHTPAREN   (rule 23)

    RIGHTPAREN	shift, and go to state 161



state 154

    IFSTMTEND  ->  ELSE @21 BSTMTSB .   (rule 78)

    $default	reduce using rule 78 (IFSTMTEND)



state 155

    EXPR  ->  EXPR . PLUS @10 EXPR   (rule 43)
    EXPR  ->  EXPR . MINUS @11 EXPR   (rule 45)
    EXPR  ->  EXPR . MULTIPLY @12 EXPR   (rule 47)
    EXPR  ->  EXPR . DIVIDE @13 EXPR   (rule 49)
    EXPR  ->  EXPR . ANDBIT @14 EXPR   (rule 51)
    EXPR  ->  EXPR . ORBIT @15 EXPR   (rule 53)
    EXPR  ->  EXPR . XORBIT @16 EXPR   (rule 55)
    EXPR  ->  EXPR . AND @17 EXPR   (rule 57)
    EXPR  ->  EXPR . OR @18 EXPR   (rule 59)
    EXPR  ->  EXPR . COMPOP @19 EXPR   (rule 61)
    ELIFSTMT  ->  ELSEIF LEFTPAREN EXPR . RIGHTPAREN @23 BSTMTSB   (rule 84)

    ISLESSEQ	shift, and go to state 63
    ISMOREQ	shift, and go to state 64
    ISEQL	shift, and go to state 65
    ISNEQL	shift, and go to state 66
    LEFTB	shift, and go to state 67
    RIGHTB	shift, and go to state 68
    OR  	shift, and go to state 69
    ORBIT	shift, and go to state 70
    AND 	shift, and go to state 71
    ANDBIT	shift, and go to state 72
    XORBIT	shift, and go to state 73
    PLUS	shift, and go to state 74
    MINUS	shift, and go to state 75
    MULTIPLY	shift, and go to state 76
    DIVIDE	shift, and go to state 77
    RIGHTPAREN	shift, and go to state 162

    COMPOP	go to state 78



state 156

    IFSTMTEND  ->  ELIFSTMTS ELSE @22 . BSTMTSB   (rule 80)

    LEFTB	shift, and go to state 14

    BSTMTSB	go to state 163



state 157

    FORSTMT  ->  FOR LEFTPAREN @26 VARDEF DOT EXPR DOT STEP RIGHTPAREN . BSTMTSB   (rule 91)

    LEFTB	shift, and go to state 14

    BSTMTSB	go to state 164



state 158

    FUNCCALL  ->  IDENTIFIER LEFTPAREN EXPR COMMA EXPR COMMA EXPR RIGHTPAREN .   (rule 26)

    $default	reduce using rule 26 (FUNCCALL)



state 159

    VARDEFFIN  ->  ASSIGN @6 EXPR @7 DOT .   (rule 38)

    $default	reduce using rule 38 (VARDEFFIN)



state 160

    WHILESTMT  ->  @24 WHILE LEFTPAREN EXPR RIGHTPAREN @25 LEFTB WSTMTS RIGHTB .   (rule 87)

    $default	reduce using rule 87 (WHILESTMT)



state 161

    FUNCARGS  ->  LEFTPAREN TYPE IDENTIFIER COMMA TYPE IDENTIFIER COMMA TYPE IDENTIFIER RIGHTPAREN .   (rule 23)

    $default	reduce using rule 23 (FUNCARGS)



state 162

    ELIFSTMT  ->  ELSEIF LEFTPAREN EXPR RIGHTPAREN . @23 BSTMTSB   (rule 84)

    $default	reduce using rule 83 (@23)

    @23 	go to state 165



state 163

    IFSTMTEND  ->  ELIFSTMTS ELSE @22 BSTMTSB .   (rule 80)

    $default	reduce using rule 80 (IFSTMTEND)



state 164

    FORSTMT  ->  FOR LEFTPAREN @26 VARDEF DOT EXPR DOT STEP RIGHTPAREN BSTMTSB .   (rule 91)

    $default	reduce using rule 91 (FORSTMT)



state 165

    ELIFSTMT  ->  ELSEIF LEFTPAREN EXPR RIGHTPAREN @23 . BSTMTSB   (rule 84)

    LEFTB	shift, and go to state 14

    BSTMTSB	go to state 166



state 166

    ELIFSTMT  ->  ELSEIF LEFTPAREN EXPR RIGHTPAREN @23 BSTMTSB .   (rule 84)

    $default	reduce using rule 84 (ELIFSTMT)



state 167

    $   	go to state 168



state 168

    $   	go to state 169



state 169

    $default	accept
